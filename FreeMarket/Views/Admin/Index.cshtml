@using FreeMarket.Models
@model Dashboard

@{
    ViewBag.Title = "Administration";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    AjaxOptions ajaxOpts = new AjaxOptions
    {
        UpdateTargetId = "CompleteTable",
        //LoadingElementId = "loadingDiv",
    };

    AjaxOptions ajaxOptsPaid = new AjaxOptions
    {
        UpdateTargetId = "paidTable",
    };

    AjaxOptions reviewAjaxOpts = new AjaxOptions
    {
        UpdateTargetId = "ratingsTable",
        //LoadingElementId = "loadingDiv",
    };

    AjaxOptions ajaxOptsRefund = new AjaxOptions
    {
        UpdateTargetId = "RefundPendingTable",
        //LoadingElementId = "loadingDiv",
    };

    AjaxOptions ajaxOptsCustomer = new AjaxOptions
    {
        UpdateTargetId = "customersResults"
        //LoadingElementId = "loadingDiv",
    };

    AjaxOptions ajaxOptsInTransit = new AjaxOptions
    {
        UpdateTargetId = "InTransitTable"
        //LoadingElementId = "loadingDiv",
    };

    AjaxOptions ajaxOptsSearchOrder= new AjaxOptions
    {
        UpdateTargetId = "searchOrderResults"
        //LoadingElementId = "loadingDiv",
    };

    AjaxOptions ajaxOptsSearchAudit = new AjaxOptions
    {
        UpdateTargetId = "searchAuditResults"
        //LoadingElementId = "loadingDiv",
    };

    AjaxOptions ajaxOptsCashSales = new AjaxOptions
    {
        UpdateTargetId = "cashSalesResults"
        //LoadingElementId = "loadingDiv",
    };
}

<br />

<h2 class="text-center"><span class="glyphicon glyphicon-dashboard">Dashboard</span></h2>

<link href="@Url.Content("~/Content/bootstrap-datetimepicker.min.css")" rel="stylesheet" type="text/css" />

<style type="text/css">
    /* Override feedback icon position */
    .form-horizontal .has-feedback .input-group .form-control-feedback {
        top: 0;
        right: -40px;
    }
</style>

<hr />

<div id="loadingDiv" style="display:none;">
    <img src="@Url.Content("~/Content/Images/loading.gif")" />
</div>

<div class="well well-modal">

    <ul class="nav nav-tabs" id="myTab">
        <li class="active"><a href="#home" data-toggle="tab">Charts</a></li>
        <li><a href="#invoices" data-toggle="tab">Invoices</a></li>
        <li><a href="#dispatch" data-toggle="tab">Orders to be Dispatched</a></li>
        <li><a href="#orders" data-toggle="tab">In Transit Orders</a></li>
        <li><a href="#customers" data-toggle="tab">Customers</a></li>
        <li><a href="#orderSearch" data-toggle="tab">Search Order</a></li>
        <li><a href="#ratings" data-toggle="tab">Ratings</a></li>
        <li><a href="#profile" data-toggle="tab">Functions</a></li>
        <li><a href="#refunds" data-toggle="tab">Refunds</a></li>
        @*<li><a href="#cashSales" data-toggle="tab">Cash Sales</a></li>*@
        <li><a href="#auditing" data-toggle="tab">Auditing</a></li>
    </ul>

    <div class="tab-content">
        <div class="tab-pane active" id="home">
            <div class="row">
                <div>
                    <div class="text-center" id="radioDiv">
                        View By Year : @Html.RadioButtonFor(m => m.Period, "Year")
                        View By Month: @Html.RadioButtonFor(m => m.Period, "Month")
                    </div>

                    <div id="YearView" style="display:none" class="center_div">
                        @using (Html.BeginForm("Dashboard", "Admin", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-group">
                                <label class="col-sm-2 control-label">Select Period</label>
                                <div class="col-sm-6">
                                    @Html.DropDownListFor(model => Model.SelectedYear, Model.YearOptions, "Choose", new { @class = "form-control-inline" })
                                    @Html.ValidationMessageFor(m => m.SelectedYear, "", new { @class = "text-danger" })
                                    @Html.Hidden("yearView", "Year")
                                </div>
                                <div class="col-sm-3">
                                    <input type="submit" value="View" class="btn btn-primary btn-sm" />
                                </div>
                            </div>
                        }
                    </div>

                    <div id="MonthView" style="display:none" class="center_div">
                        @using (Html.BeginForm("Dashboard", "Admin", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-group">
                                <label class="col-sm-2 control-label">Select Period</label>
                                <div class="col-sm-5">
                                    <div class="input-group date" id="datetimePicker">
                                        @{ Html.EnableClientValidation(false); }
                                        @Html.EditorFor(m => m.SelectedMonth, new { htmlAttributes = new { @class = "form-control-inline" } })
                                        @{ Html.EnableClientValidation(true); }

                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.SelectedMonth, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-sm-3">
                                    <input type="submit" value="View" class="btn btn-primary btn-sm" />
                                </div>
                            </div>
                            @Html.Hidden("monthView", "Month")
                                            }
                    </div>
                </div>
            </div>
            <div class="row">
                <h2 class="text-center">Sales</h2>
                <h3 class="text-center">Total sales in selected period: @string.Format("{0:C}", Model.TotalSales)</h3>
                <hr />
                @if (Model.SalesInformation.SalesDetails != null)
                {
                    <div id="sales" style="height: 250px;"></div>
                }
                else
                {
                    <text>No sales yet.</text>
                    <div id="sales" style="height: 0px;"></div>
                }
            </div>
            <div class="row">
                @*<div class="col-sm-12">
                    <h2 class="text-center">Transaction Status</h2>
                    <hr />
                    @if (Model.SalesInformation.TransactionDetails != null)
                    {
                        <div id="transactionStatus" style="height: 250px;"></div>
                    }
                    else
                    {
                        <text>No transactions yet.</text>
                        <div id="transactionStatus" style="height: 0px;"></div>
                    }
                </div>*@
                @*<div class="col-sm-6">
                    <h2 class="text-center">Payment Methods</h2>
                    <hr />
                    @if (Model.SalesInformation.PaymentDetails != null)
                    {
                        <div id="paymentTypes" style="height: 250px;"></div>
                    }
                    else
                    {
                        <text>No transactions yet.</text>
                        <div id="paymentTypes" style="height: 0px;"></div>
                    }
                </div>*@
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <h2 class="text-center">Order Statuses</h2>
                    <hr />
                    @if (Model.SalesInformation.TotalCancelledOrders == 0 &&
                Model.SalesInformation.TotalLockedOrders == 0 &&
                Model.SalesInformation.TotalUnconfirmedOrders == 0 &&
                Model.SalesInformation.TotalConfirmedOrders == 0 &&
                Model.SalesInformation.TotalCompletedOrders == 0 &&
                Model.SalesInformation.TotalRefundedOrders == 0)
                    {
                        <text>No transactions yet.</text>
                        <div id="orderStatuses" style="height: 0px;"></div>
                    }
                    else
                    {
                        <div id="orderStatuses" style="height: 250px;"></div>
                    }
                </div>
                <div class="col-sm-6">
                    <h2 class="text-center">Number of items in Orders</h2>
                    <hr />
                    @if (Model.SalesInformation.NumberOrdersSingleItem == 0 &&
                Model.SalesInformation.NumberOrdersTwoToFive == 0 &&
                Model.SalesInformation.NumberOrdersGreaterFive == 0)
                    {
                        <text>No transactions yet.</text>
                        <div id="itemsInOrders" style="height: 0px;"></div>
                    }
                    else
                    {
                        <div id="itemsInOrders" style="height: 250px;"></div>
                    }
                </div>
            </div>
        </div>
        <div class="tab-pane" id="invoices">
            <div class="text-center">
                <h2>Invoices</h2>
                @Ajax.ActionLink("Refresh", "RefreshInvoices", null, ajaxOptsPaid, new { @class = "btn btn-success" })
                <br />
            </div>
            
            @using (Ajax.BeginForm("MarkPaid", "Admin", null, ajaxOptsPaid))
            {
                @Html.AntiForgeryToken()

                <div id="paidTable">
                    @Html.Partial("_Invoices", Model.Invoices)
                </div>
            }
        </div>
        <div class="tab-pane" id="dispatch">
            <div class="text-center">
                <h2>Confirmed Orders</h2>
                @Ajax.ActionLink("Refresh", "RefreshConfirmed", null, ajaxOptsInTransit, new { @class = "btn btn-success" })
                <br />
            </div>

            @using (Ajax.BeginForm("MarkInTransit", "Admin", null, ajaxOptsInTransit))
            {
                @Html.AntiForgeryToken()

                <div id="InTransitTable">
                    @Html.Partial("_ConfirmedOrders", Model.ConfirmedOrders)
                </div>
            }
        </div>
        <div class="tab-pane" id="orders">
            <div class="text-center">
                <h2>In Transit Orders</h2>
                @Ajax.ActionLink("Refresh", "RefreshInTransit", null, ajaxOpts, new { @class = "btn btn-success" })
                <br />
            </div>

            @using (Ajax.BeginForm("MarkComplete", "Admin", null, ajaxOpts))
            {
                @Html.AntiForgeryToken()

                <div id="CompleteTable">
                    @Html.Partial("_InTransitOrders", Model.InTransitOrders)
                </div>
            }
        </div>
        <div class="tab-pane" id="ratings">
            <div id="ratingsTable">

                @if (Model.RatingsInformation.AverageRatings != null && Model.RatingsInformation.AverageRatings.Count > 0)
                {
                    @Html.Partial("_AverageRatings", Model.RatingsInformation)
                }

                @if (Model.RatingsInformation != null)
                {
                    @Html.Partial("_ApproveRatings", Model.RatingsInformation)
                }

            </div>
        </div>
        <div class="tab-pane" id="orderSearch">
            <h2 class="text-center">Search Orders</h2>
            <hr />
            
            @using (Ajax.BeginForm("SearchOrder", "Admin", null, ajaxOptsSearchOrder, new { @id = "searchOrderForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-group center_div">
                    <div class="col-sm-6">
                        @Html.TextBoxFor(c => c.OrderSearchCriteria, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.OrderSearchCriteria, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-3">
                        <input type="submit" value="Filter by Order Number" class="btn btn-primary btn-sm" />
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-12">
                        <br />
                    </div>
                </div>     
            }

            <br />
            <br />
            
            <div id="searchOrderResults">
                
            </div>

        </div>
        <div class="tab-pane" id="customers">
            <h2 class="text-center">Customers</h2>
            <hr />
            @using (Ajax.BeginForm("SearchCustomer", "Admin", null, ajaxOptsCustomer, new { @id = "searchCustomerForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-group center_div">
                    <div class="col-sm-6">
                        @Html.TextBoxFor(c => c.CustomerSearchCriteria, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.CustomerSearchCriteria, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-3">
                        <input type="submit" value="Filter" class="btn btn-primary btn-sm" />
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-12">
                        <br />
                    </div>
                </div>

                <br />
                <br />

                <div id="customersResults">
                </div>
            }
        </div>
        <div class="tab-pane" id="refunds">
            <div id="CancelledTable">
                @Html.Partial("_RefundOrders", Model.RefundableOrders)
            </div>
            @using (Ajax.BeginForm("MarkRefundComplete", "Admin", null, ajaxOptsRefund))
            {
                @Html.AntiForgeryToken()
                <div id="RefundPendingTable">
                    @Html.Partial("_RefundPending", Model.RefundPending)
                </div>

                if (Model.RefundPending != null && Model.RefundPending.Count > 0)
                {
                    <div class="col-sm-offset-5">
                        <input type="submit" value="Complete Refund" class="btn btn-primary btn-sm" />
                    </div>
                }
            }
        </div>
        @*<div class="tab-pane" id="cashSales">
            <h2 class="text-center">Cash Orders</h2>
            <hr />

            @using (Ajax.BeginForm("SearchCashOrders", "Admin", null, ajaxOptsCashSales, new { @id = "searchCashSalesForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-group">
                    <div class="col-md-3">
                        @Html.ActionLink("New Cash Order", "InitiateCashOrder", "Admin", null, new { @class = "btn btn-success" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(c => c.CashSalesCriteria, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.CashSalesCriteria, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        <input type="submit" value="Filter" class="btn btn-primary btn-sm" />
                    </div>
                </div>

                <div class="form-group center_div">
                    <div class="col-sm-12">
                        <br />
                    </div>
                </div>
            }

            <br />
            <br />

            <div id="cashSalesResults">

            </div>
        </div>*@
        <div class="tab-pane" id="auditing">
            <h2 class="text-center">Search Audit</h2>
            <hr />

            <div>
                Website hits since inception: @Model.WebsiteHits
            </div>
            @*<div>
                SMS credits remaining: @Model.SMSCredits
            </div>*@

            @using (Ajax.BeginForm("SearchAudit", "Admin", null, ajaxOptsSearchAudit, new { @id = "searchAuditForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-group center_div">
                    <div class="col-sm-6">
                        @Html.TextBoxFor(c => c.AuditSearchCriteria, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.AuditSearchCriteria, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-3">
                        <input type="submit" value="Filter" class="btn btn-primary btn-sm" />
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-12">
                        <br />
                    </div>
                </div>


            }

            <br />
            <br />

            <div id="searchAuditResults">

            </div>
        </div>
        <div class="tab-pane" id="profile">
            <div style="font-size:x-large">
                @Html.Partial("_Functions")
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    $('.ratingDisplay').rating({ displayOnly: true, step: 1, stars: 3, clearCaption: 'Not yet rated' });

    $(function () {
        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            localStorage.setItem('lastTab', $(this).attr('href'));
        });

        var lastTab = localStorage.getItem('lastTab');
        if (lastTab) {
            $('[href="' + lastTab + '"]').tab('show');
        }
    });

    $(document).ready(function () {
        if (location.hash) {
            $('a[href=' + location.hash + ']').tab('show');
        }
        $(document.body).on("click", "a[data-toggle]", function (event) {
            location.hash = this.getAttribute("href");
        });
    });
    $(window).on('popstate', function () {
        var anchor = location.hash || $("a[data-toggle=tab]").first().attr("href");
        $('a[href=' + anchor + ']').tab('show');
    });

    @if (Model.SalesInformation.SalesDetails == null)
    {

    }
    else
    {
        if (Model.Period == "Year")
        {
            <text>
    new Morris.Line({
        // ID of the element in which to draw the chart.
        element: 'sales',
        // Chart data records -- each entry in this array corresponds to a point on
        // the chart.
        parseTime: false,
        data: [
        </text>
            foreach (KeyValuePair<string, decimal> record in Model.SalesInformation.SalesDetails)
            {
                if (Model.SelectedYear == "0")
                {
                        <text>
                        { Year: '@record.Key', value: @(((int)record.Value)) },
                    </text>
                }
                else
                {
                        <text>
                        { Month: '@record.Key', value: @(((int)record.Value)) },
                    </text>
                }
            }
            <text>

        ],
        </text>

            if (Model.SelectedYear == "0")
            {
                <text>
        xkey: 'Year',
        </text>
            }
            else
            {
                <text>
        xkey: 'Month',
        </text>
            }

            <text>
        // A list of names of data record attributes that contain y-values.
        ykeys: ['value'],
        // Labels for the ykeys -- will be displayed when you hover over the
        // chart.
        labels: ['Value'],
        resize: true,
        preUnits:  'R '
    });
    </text>

        }
        else if (Model.Period == "Month")
        {
            <text>
    new Morris.Line({
        // ID of the element in which to draw the chart.
        element: 'sales',
        // Chart data records -- each entry in this array corresponds to a point on
        // the chart.
        parseTime: false,
        data: [
        </text>
            foreach (KeyValuePair<string, decimal> record in Model.SalesInformation.SalesDetails)
            {
                {
                        <text>
                        { Week: '@record.Key', value: @(((int)record.Value)) },
                    </text>
                }
            }
            <text>

        ],
        </text>

            <text>
        xkey: 'Week',
        </text>

            <text>
        // A list of names of data record attributes that contain y-values.
        ykeys: ['value'],
        // Labels for the ykeys -- will be displayed when you hover over the
        // chart.
        labels: ['Value'],
        resize: true,
        preUnits:  'R '
    });
    </text>
        }
    }

    @*@if (Model.SalesInformation.TransactionDetails == null || Model.SalesInformation.TransactionDetails.Count == 0)
    {

    }
    else
    {
        <text>
    new Morris.Donut({
        element: 'transactionStatus',
        parseTime: false,
        data: [
        </text>
              foreach (KeyValuePair<string, int> record in Model.SalesInformation.TransactionDetails)
              {
            <text>
                { label: "@record.Key", value: @record.Value },
            </text>
              }
     <text>
        ],
        labelColor: '#ffffff',
        colors: [
            '#ff0000',
            '#0BA462',
            '#ff6600',
            '#ffff00',
            '#9999ff'
        ]
    });
    </text>
    }*@


    @*@if(Model.SalesInformation.PaymentDetails == null || Model.SalesInformation.PaymentDetails.Count == 0)
    {

    }
    else
    {
        <text>
    new Morris.Donut({
        element: 'paymentTypes',
        parseTime: false,
        data: [
            </text>

              foreach (KeyValuePair<string, int> record in Model.SalesInformation.PaymentDetails)
              {
                 <text>
                { label: "@record.Key", value: @record.Value },
                 </text>
              }
            <text>
        ],
        labelColor: '#ffffff',
    });
    </text>
    }*@


    @if (Model.SalesInformation.TotalCancelledOrders == 0 &&
            Model.SalesInformation.TotalLockedOrders == 0 &&
            Model.SalesInformation.TotalUnconfirmedOrders == 0 &&
            Model.SalesInformation.TotalConfirmedOrders == 0 &&
            Model.SalesInformation.TotalCompletedOrders == 0 &&
            Model.SalesInformation.TotalRefundedOrders == 0)
    {

    }
    else
    {
        <text>
    new Morris.Donut({
        element: 'orderStatuses',
        parseTime: false,
        data: [
            { label: "Completed", value: @Model.SalesInformation.TotalCompletedOrders },
            { label: "Confirmed", value: @Model.SalesInformation.TotalConfirmedOrders },
            { label: "Unconfirmed", value: @Model.SalesInformation.TotalUnconfirmedOrders },
            { label: "Cancelled", value: @Model.SalesInformation.TotalCancelledOrders },
            { label: "Locked", value: @Model.SalesInformation.TotalLockedOrders },
            { label: "Refunded", value: @Model.SalesInformation.TotalRefundedOrders }
        ],
        labelColor: '#ffffff',
        colors: [
        '#33ffbb',
        '#0BA462',
        '#ffff33',
        '#cc0000',
        '#66ccff',
        '#ff9900'
        ],
    });
    </text>
    }

    @if (Model.SalesInformation.NumberOrdersSingleItem == 0 &&
            Model.SalesInformation.NumberOrdersTwoToFive == 0 &&
            Model.SalesInformation.NumberOrdersGreaterFive == 0 )
    {

    }
    else
    {
        <text>
    new Morris.Donut({
        element: 'itemsInOrders',
        parseTime: false,
        data: [
            { label: "1 item", value: @Model.SalesInformation.NumberOrdersSingleItem },
            { label: "2 - 5 items", value: @Model.SalesInformation.NumberOrdersTwoToFive },
            { label: "> 5 items", value: @Model.SalesInformation.NumberOrdersGreaterFive }
        ],
        labelColor: '#ffffff',
        colors: [
        '#ffff33',
        '#0BA462',
        '#33ffbb'
        ],
    });
    </text>
    }

    $('#datetimePicker').datetimepicker({
        format: 'MM/YYYY',
        useCurrent: true,
        widgetPositioning: {
            horizontal: 'auto',
            vertical: 'bottom'
        }
    }
    );

    $(document).ready(function() {
        $('input[type=radio][name=Period]').change(function() {
            if (this.value == 'Year') {
                $("#YearView").show();
                $("#MonthView").hide();
            }
            else if (this.value == 'Month') {
                $("#YearView").hide();
                $("#MonthView").show();
            }
        });
    });

    $(document).ready(function() {
        @if(Model.Period == "Month")
        {
            <text>$("#MonthView").show();</text>
        }
        else
        {
            <text>$("#YearView").show();</text>
        }
    });

</script>
