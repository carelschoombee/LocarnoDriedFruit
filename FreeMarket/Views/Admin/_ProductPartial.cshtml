@using FreeMarket.Models
@model Product

@Html.ValidationSummary(true, "", new { @class = "text-danger" })

<div class="form-group">
    @Html.LabelFor(m => m.Description, new { @class = "col-md-4 control-label" })
    <div class="col-md-6">
        @Html.TextBoxFor(m => m.Description, new { @class = "form-control" })
        @Html.HiddenFor(m => m.ProductNumber)
        @Html.HiddenFor(m => m.DepartmentNumber)
        @Html.HiddenFor(m => m.SupplierNumber)
        @Html.HiddenFor(m => m.DateAdded)
        @Html.HiddenFor(m => m.IsVirtual)
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(m => m.LongDescription, new { @class = "col-md-4 control-label" })
    <div class="col-md-6">
        @Html.TextAreaFor(m => m.LongDescription, new { @class = "form-control" })
    </div>
</div>

@if (Model.Suppliers == null || Model.Suppliers.Count == 0)
{
    <div class="form-group">
        @Html.LabelFor(m => m.DepartmentName, new { @class = "col-md-4 control-label" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.SelectedDepartment, Model.Departments, new { @class = "form-control" })
        </div>
    </div>
}
else
{
    <div class="form-group">
        @Html.LabelFor(m => m.DepartmentName, new { @class = "col-md-4 control-label" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.SelectedDepartment, Model.Departments, "Choose", new { @class = "form-control" })
        </div>
    </div>
}

@if (Model.Suppliers == null || Model.Suppliers.Count == 0)
{
    <div class="form-group">
        @Html.LabelFor(m => m.SupplierName, new { @class = "col-md-4 control-label" })
        <div class="col-md-6">
            @Html.DisplayFor(m => m.SupplierName, new { @class = "form-control" })
            @Html.HiddenFor(m => m.SupplierName)
        </div>
    </div>
}
else
{
    <div class="form-group">
        @Html.LabelFor(m => m.SupplierName, new { @class = "col-md-4 control-label" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.SelectedSupplier, Model.Suppliers, "Choose", new { @class = "form-control" })
        </div>
    </div>
}

@if (Model.CustodianInfo == null || Model.CustodianInfo.Count == 0)
{
    <div class="form-group">
        @Html.LabelFor(m => m.SelectedCustodianNumber, new { @class = "col-md-4 control-label" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.SelectedCustodianNumber, Model.Custodians, "Choose", new { @class = "form-control" })
        </div>
    </div>
}
else
{
    <table class="table table-bordered-custom table-responsive">
        <tr>
            <th>Custodian Name</th>
            <th>Quantity On Hand</th>
        </tr>
        @foreach (KeyValuePair<string, int> item in Model.CustodianInfo)
        {
            <tr>
                <td>
                    @item.Key
                </td>
                <td>
                    @item.Value units
                </td>
            </tr>
        }
    </table>
}

@*<div class="form-group">
    @Html.LabelFor(m => m.PricePerUnit, new { @class = "col-md-4 control-label" })
    <div class="col-md-6">
        @{ Html.EnableClientValidation(false); }
        @Html.EditorFor(m => m.PricePerUnit, new { htmlAttributes = new { @class = "form-control" } })
        @{ Html.EnableClientValidation(true); }
    </div>
</div>*@
@*<div class="form-group">
    @Html.LabelFor(m => m.SpecialPricePerUnit, new { @class = "col-md-4 control-label" })
    <div class="col-md-6">
        @{ Html.EnableClientValidation(false); }
        @Html.EditorFor(m => m.SpecialPricePerUnit, new { htmlAttributes = new { @class = "form-control" } })
        @{ Html.EnableClientValidation(true); }
    </div>
</div>
<div class="form-group">
    @Html.LabelFor(m => m.RetailPricePerUnit, new { @class = "col-md-4 control-label" })
    <div class="col-md-6">
        @{ Html.EnableClientValidation(false); }
        @Html.EditorFor(m => m.RetailPricePerUnit, new { htmlAttributes = new { @class = "form-control" } })
        @{ Html.EnableClientValidation(true); }
    </div>
</div>*@

@*<div class="form-group">
    @Html.LabelFor(m => m.IsVirtual, new { @class = "col-md-4 control-label" })
    <div class="col-md-6">
        @Html.EditorFor(m => m.IsVirtual)
    </div>
</div>*@

@*<div class="form-group">
    @Html.LabelFor(m => m.Weight, new { @class = "col-md-4 control-label" })
    <div class="col-md-6">
        @{ Html.EnableClientValidation(false); }
        @Html.EditorFor(m => m.Weight, new { htmlAttributes = new { @class = "form-control" } })
        @{ Html.EnableClientValidation(true); }
    </div>
</div>
<div class="form-group">
    @Html.LabelFor(m => m.Size, new { @class = "col-md-4 control-label" })
    <div class="col-md-6">
        @Html.TextBoxFor(m => m.Size, new { @class = "form-control" })
    </div>
</div>*@

@if (Model.SizeVariations != null && Model.SizeVariations.Count > 0)
{
    <table class="table table-bordered-custom table-condensed">
        <tr>
            <th>Description</th>
            <th>Price Per Unit</th>
            <th>Active</th>
        </tr>
        @for (int i = 0; i < Model.SizeVariations.Count; i++)
        {
        <tr>
            <td>
                @Model.SizeVariations[i].Description
                @Html.HiddenFor(m => Model.SizeVariations[i].SizeId)
            </td>
            <td>
                @{ Html.EnableClientValidation(false); }
                @Html.EditorFor(m => Model.SizeVariations[i].PricePerUnit, new { htmlAttributes = new { @class = "form-control" } })
                @{ Html.EnableClientValidation(true); }
                @Html.ValidationMessageFor(m => Model.SizeVariations[i].PricePerUnit, null, new { @class = "text-danger" })
            </td>
            <td>
                @Html.EditorFor(m => Model.SizeVariations[i].Activated)
            </td>
        </tr>
        }
    </table>
}

<div class="form-group">
    @Html.LabelFor(m => m.DateAdded, new { @class = "col-md-4 control-label" })
    <div class="col-md-6">
        @Html.DisplayFor(m => m.DateAdded, new { @class = "form-control" })
    </div>
</div>

@if (Model.DateModified != null && Model.DateModified != DateTime.MinValue)
{
    <div class="form-group">
        @Html.LabelFor(m => m.DateModified, new { @class = "col-md-4 control-label" })
        <div class="col-md-6">
            @Html.DisplayFor(m => m.DateModified, new { @class = "form-control" })
            @Html.HiddenFor(m => m.DateModified)
        </div>
    </div>
}

<div class="form-group">
    @Html.LabelFor(m => m.Activated, new { @class = "col-md-4 control-label" })
    <div class="col-md-6">
        @Html.EditorFor(m => m.Activated)
    </div>
</div>

<hr />

<div class="container">
    <div class="row">
        <div class="col-sm-6">
            <div class="col-sm-6">
                <div class="form-group">
                    <div style="position:relative;">
                        <label>Image Medium (336 x 280)</label>
                        <a class='btn btn-primary' href='javascript:;'>
                            Choose...
                            <input type="file" name="imagePrimary" size="40"
                                   style="position:absolute;z-index:2;top:0;
                                left:0;filter: alpha(opacity=0); opacity:0;
                                background-color:transparent;color:transparent;"
                                   onchange="readURLPrimary(this);">
                        </a>
                        <div class="col-sm-12">
                            <img id="imagePrimaryPreview" class="img-thumbnail" src="@Url.Action("RenderImage", "Image", new { id = Model.MainImageNumber })" alt="Free Market" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <div style="position:relative;">
                        <label>Image Small (80 x 79)</label>
                        <a class='btn btn-primary' href='javascript:;'>
                            Choose...
                            <input type="file" name="imageSecondary" size="40"
                                   style="position:absolute;z-index:2;top:0;
                                left:0;filter: alpha(opacity=0); opacity:0;
                                background-color:transparent;color:transparent;"
                                   onchange="readURLSecondary(this);">
                        </a>
                        <div class="col-sm-12">
                            <img id="imageSecondaryPreview" class="img-thumbnail" src="@Url.Action("RenderImage", "Image", new { id = Model.SecondaryImageNumber, DefaultSize = PictureSize.Small })" alt="Free Market" />
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="col-sm-6">
                <div class="form-group">
                    <div style="position:relative;">
                        <label>Image Additional (336 x 280)</label>
                        <a class='btn btn-primary' href='javascript:;'>
                            Choose...
                            <input type="file" name="imageAdditional" size="40"
                                   style="position:absolute;z-index:2;top:0;
                                left:0;filter: alpha(opacity=0); opacity:0;
                                background-color:transparent;color:transparent;"
                                   onchange="readURLAdditional(this);">
                        </a>
                        <div class="col-sm-12">
                            <img id="imageAdditionalPreview" class="img-thumbnail" src="@Url.Action("RenderImage", "Image", new { id = Model.AdditionalImageNumber })" alt="Free Market" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
     </div>
</div>



