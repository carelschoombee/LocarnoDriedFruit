@using FreeMarket.Models
@model ContactUsViewModel

@{
    ViewBag.Title = "View Map";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Scripts {
    <script type="text/javascript"
            src="http://maps.google.com/maps/api/js?sensor=false"></script>
}

<!DOCTYPE html>
<html>
<head>
    <title>Store Map</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
        html, body, #map-canvas {
            height: 485px;
            margin: 0px;
            padding: 0px;
        }
    </style>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
    <script>

        var map;
        function initialize() {
            try {
                var mapOptions = {
                    zoom: @(Model.SupportInfo.DefaultZoomLevel),
                    center: new google.maps.LatLng(@(Model.SupportInfo.Latitude), @(Model.SupportInfo.Longitude)),
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    streetViewControl: false
                };
                map = new google.maps.Map(document.getElementById('map-canvas'),
                    mapOptions);

                var shop = new google.maps.LatLng(@(Model.SupportInfo.Latitude), @(Model.SupportInfo.Longitude));

                var storeMarket = new google.maps.Marker({
                    position: shop,
                    map: map,
                    title: '@(Model.SupportInfo.StoreName)'
                });

                @*var circle = new google.maps.Circle({
                    map: map,
                    radius: @(Model.Radius),
                    fillColor: '#FFFFFF',
                    fillOpacity: 0.0
                });
                circle.bindTo('center', storeMarket, 'position');*@

                @*var address = '@(Model.DestinationStreetAddress)';

                var geocoder = new google.maps.Geocoder();
                geocoder.geocode({ address: address }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        var streetAddress = results[0].geometry.location;
                        var marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location,
                            title: address
                        });

                        var request = {
                            origin: shop,
                            destination: streetAddress,
                            travelMode: google.maps.TravelMode.DRIVING
                        };

                        var directionsDisplay = new google.maps.DirectionsRenderer();
                        var directionsService = new google.maps.DirectionsService();
                        directionsService.route(request, function (result, status) {
                            if (status == google.maps.DirectionsStatus.OK) {
                                directionsDisplay.setDirections(result);
                                directionsDisplay.setMap(map);

                                var route = result.routes[0];
                                var summaryPanel = document.getElementById('directions_panel');
                                summaryPanel.innerHTML = '';
                                for (var i = 0; i < route.legs.length; i++)
                                {
                                    var routeSegment = i + 1;
                                    summaryPanel.innerHTML += route.legs[i].distance.text + '<br>';
                                    summaryPanel.innerHTML += route.legs[i].duration.text;
                                }
                            }
                        });
                    }
                });*@

            } catch (err) {
            }
        }

        function loadMap() {
            try {
                google.maps.event.addDomListener(window, 'load', initialize);
            } catch (err) {
            }
        }

        loadMap();

    </script>
</head>
<body>
    <h1 class="text-center">Contact Locarno Sun Dried Fruit</h1>
    <table style="width:100%; height:100%">
        <tr style="height:80%">
            <td colspan="3">
                <div id="map-canvas"></div>
            </td>
        </tr>
        <tr style="background-color:white; color:black">
            <td>
                <div class="row">
                    <div class="col-sm-6">
                        <h2 class="text-center">Contact us</h2>
                        <div>
                            <div style="font-weight:600; font-size:24px" class="glyphicon glyphicon-phone">Tel: @Model.SupportInfo.Landline</div>
                            <div>
                                <span style="font-size:20px">Fax: @Model.SupportInfo.Fax</span>
                            </div>
                        </div>
                        <br />
                        <div>
                            <span class="glyphicon glyphicon-pencil" style="font-size:20px">Email: @Model.SupportInfo.Email</span>
                        </div>
                        <br />
                        <div>
                            <span style="font-weight:400; font-size:24px">Managing and Marketing:</span>
                        </div>
                        <br />
                        <div>
                            <div style="font-size:20px; font-weight:400"><b>@Model.SupportInfo.Manager1</b> : @Model.SupportInfo.ManagingEmail1</div>
                            <div style="font-size:20px; font-weight:400"><b>@Model.SupportInfo.Manager2</b> : @Model.SupportInfo.ManagingEmail2</div>
                        </div>
                        <br />
                        <div>
                            <span style="font-weight:400; font-size:24px">Accounts and Admin:</span>
                        </div>
                        <br />
                        <div>
                            <span style="font-size:20px; font-weight:400"><b>@Model.SupportInfo.AccountsPerson</b> : @Model.SupportInfo.AccountsEmail</span>
                        </div>
                        <br />
                        <div>
                            <div style="font-weight:400; font-size:24px" class="glyphicon glyphicon-map-marker"><b>Physical Address</b> : @Model.SupportInfo.PhysicalAddress</div>
                            <div style="font-weight:400; font-size:24px"><b>Postal Address</b> :  @Model.SupportInfo.PostalAddress</div>
                        </div>
                    </div>
                   
                    <div class="col-sm-6">
                        <h2 class="text-center">Get in touch with us</h2>
                        @using (Html.BeginForm("SendEmail", "Home", FormMethod.Post, new { @id = "sendEmailForm" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-group">
                                @Html.LabelFor(m => m.Name, new { @class = "col-md-4 control-label" })
                                <div class="col-md-6">
                                    @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.HiddenFor(m => m.DestinationEmail)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.FromEmail, new { @class = "col-md-4 control-label" })
                                <div class="col-md-6">
                                    @Html.EditorFor(m => m.FromEmail, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.Message, new { @class = "col-md-4 control-label" })
                                <div class="col-md-6">
                                    @Html.TextAreaFor(model => model.Message, new { @class = "form-control", @cols = 80, @rows = 10 })
                                </div>
                            </div>
                            <div class="form-group text-center">
                                <div class="col-md-6">
                                    <input type="submit" class="btn btn-info" value="Submit" />
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </td>
        </tr>
    </table>
</body>
</html>

<script type="text/javascript">
    $(document).ready(function () {
        $('#sendEmailForm')
                .bootstrapValidator({
                    feedbackIcons: {
                        valid: 'glyphicon glyphicon-ok',
                        invalid: 'glyphicon glyphicon-remove',
                        validating: 'glyphicon glyphicon-refresh'
                    },
                    fields: {
                        'Name': {
                            validators: {
                                notEmpty: {
                                    message: 'The field is required.'
                                },
                                stringLength: {
                                    max: 100,
                                    message: 'The input is too long.'
                                }
                            }
                        },
                        'FromEmail': {
                            validators: {
                                notEmpty: {
                                    message: 'The field is required.'
                                },
                                email: {
                                    message: 'You must enter a valid email address.'
                                },
                                stringLength: {
                                    max: 100,
                                    message: 'The input is too long.'
                                }
                            }
                        },
                        'Message': {
                            validators: {
                                notEmpty: {
                                    message: 'The field is required.'
                                },
                                stringLength: {
                                    max: 2000,
                                    message: 'The input is too long.'
                                }
                            }
                        },
                       
                        }
                    })
    });
</script>