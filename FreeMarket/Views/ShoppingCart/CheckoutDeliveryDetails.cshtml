@using FreeMarket.Models
@model SaveCartViewModel

@{
    ViewBag.Title = "Secure Checkout - Delivery Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="@Url.Content("~/Content/bootstrap-datetimepicker.min.css")" rel="stylesheet" type="text/css" />

<style type="text/css">
    /* Override feedback icon position */
    .form-horizontal .has-feedback .input-group .form-control-feedback {
        top: 0;
        right: -40px;
    }
</style>

<h2 class="text-center"><span class="glyphicon glyphicon-lock"></span>@ViewBag.Title</h2>
<hr />

<div id="parentDelivery" class="container center_div well well-modal">

    @using (Html.BeginForm("UpdateDeliveryDetails", "ShoppingCart", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "saveForm" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger", @style = "font-size:20px" })

            @if (Model.OrderStatus == "Locked")
            {
                <table class="table table-bordered-custom table-responsive">
                    <tr>
                        <td class="text-center"><span class="text-info">Your order has been locked, you can only change your preferred delivery date. If you want to change your address or delivery type you must cancel the order and make a new one.</span></td>
                    </tr>
                    <tr>
                        <td class="text-center">
                            <a class="btn btn-danger btn-sm" href="@Url.Action("CancelOrder", "ShoppingCart")"><span class="glyphicon glyphicon-remove">&nbsp;&nbsp;Cancel Order</span></a>
                        </td>
                    </tr>
                </table>
            }

            @Html.Raw(Model.TextBlock1)

            <br />
            <br />

            @if (Model.OrderStatus == "Locked")
            {
                <div class="form-group">
                    @Html.LabelFor(m => m.SelectedAddress, new { @class = "col-md-4 control-label" })
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.SelectedAddress, Model.AddressNameOptions, new { @class = "form-control", @disabled = "disabled" })
                        @Html.HiddenFor(m => m.SelectedAddress)
                        @Html.HiddenFor(c => c.DaysToAddToMinDate)
                    </div>
                </div>

                <div id="AddressContainer">
                    @Html.Partial("_CartModifyDeliveryDetails", Model)
                </div>

                <div id="DeliveryTypeContainer">
                    @Html.Partial("_CartModifyDeliveryTypeDetails", Model)
                </div>

                <div class="form-group">
                    <div class="col-md-12">
                        <hr />
                    </div>
                </div>

                <div id="deliveryDateContainer" class="form-group">
                    <label class="col-sm-4 control-label">Preferred Delivery Time</label>
                    <div class="col-sm-6">
                        <div class="input-group date" id="datetimePicker">
                            @{ Html.EnableClientValidation(false); }
                            @Html.EditorFor(m => m.prefDeliveryDateTime, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(m => m.prefDeliveryDateTime)
                            @{ Html.EnableClientValidation(true); }
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        <span id="temp">Example: 18/03/2024 12:00</span>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    @Html.LabelFor(m => m.SelectedAddress, new { @class = "col-md-4 control-label" })
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.SelectedAddress, Model.AddressNameOptions, new { @class = "form-control" })
                        @Html.HiddenFor(c => c.DaysToAddToMinDate)
                    </div>
                </div>

                <div id="AddressContainer">
                    @Html.Partial("_CartModifyDeliveryDetails", Model)
                </div>

                <div id="DeliveryTypeContainer">
                    <div class="form-group">
                        <div class="col-md-12">
                            @Html.Partial("_CartModifyDeliveryTypeDetails", Model)
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-12">
                        <hr />
                    </div>
                </div>

                <div id="deliveryDateContainer" class="form-group">
                    <label class="col-sm-4 control-label">Preferred Delivery Time</label>
                    <div class="col-sm-6">
                        <div class="input-group date" id="datetimePicker">
                            @{ Html.EnableClientValidation(false); }
                            @Html.EditorFor(m => m.prefDeliveryDateTime, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(m => m.prefDeliveryDateTime)
                            @{ Html.EnableClientValidation(true); }
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        <span id="temp">Example: 18/03/2024 12:00</span>
                    </div>
                </div>
            }

            <div class="center_div">
                <input type="submit" value="Next - Confirmation" class="btn btn-success btn-sm" />
                <a class="btn btn-primary btn-sm" href="@Url.Action("Cart", "ShoppingCart")"><span class="glyphicon glyphicon-shopping-cart">&nbsp;&nbsp;Back To Cart</span> </a>
            </div>
        </div>
    }
</div>

<script type="text/javascript">

    $('#datetimePicker').datetimepicker({
        format: 'DD/MM/YYYY HH:mm',
        daysOfWeekDisabled: [0, 6],

        minDate: moment().add(1, 'days'),

        maxDate: moment().add(30, 'days'),
        useCurrent: false,
        widgetPositioning: {
            horizontal: 'auto',
            vertical: 'top'
        }
    }
    );

    $('#datetimePicker')
    .on('dp.change dp.show', function (e) {
        // Validate the date when user change it
        $('#saveForm')
            // Get the bootstrapValidator instance
            .data('bootstrapValidator')
            // Mark the field as not validated, so it'll be re-validated when the user change date
            .updateStatus('prefDeliveryDateTime', 'NOT_VALIDATED', null)
            // Validate the field
            .validateField('prefDeliveryDateTime');
    });

    $(document).ready(function () {
        $('#saveForm')
            .bootstrapValidator({
                feedbackIcons: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'
                },
                fields: {
                    'prefDeliveryDateTime': {
                        validators: {
                            notEmpty: {
                                message: 'Please select a date and time'
                            },
                            date: {
                                format: 'DD/MM/YYYY HH:mm',
                                message: 'The value is not a valid date'
                            },
                            callback: {
                                message: 'Please choose a date in the near future (24 hours in the future)',
                                callback: function (value, validator) {
                                    var m = new moment(value, 'DD/MM/YYYY HH:mm', true);
                                    if (!m.isValid()) {
                                        return false;
                                    }
                                    // Check if the date in our range
                                    return m.isAfter(moment().add(23, 'hours')) && m.isBefore(moment().add(30, 'days'));
                                }
                            },
                            callback: {
                                message: 'Please choose a valid time (office hours between 08:00 and 17:00)',
                                callback: function (value, validator) {
                                    var m = new moment(value, 'DD/MM/YYYY HH:mm', true);
                                    var hb = new moment(value, 'DD/MM/YYYY HH:mm', true).hour(7);
                                    var ha = new moment(value, 'DD/MM/YYYY HH:mm', true).hour(17);
                                    if (!m.isValid()) {
                                        return false;
                                    }
                                    // Check if the date in our range
                                    return m.isBetween(hb, ha, 'minutes', '[]');
                                }
                            }
                        }
                    },
                    'Address.AddressLine1': {
                        validators: {
                            notEmpty: {
                                message: 'The field is required.'
                            },
                            stringLength: {
                                message: 'Max string length is 250.',
                                max: 250
                            }
                        }
                    },
                    'Address.AddressLine2': {
                        validators: {
                            stringLength: {
                                message: 'Max string length is 250.',
                                max: 250
                            }
                        }
                    },
                    'Address.AddressLine3': {
                        validators: {
                            stringLength: {
                                message: 'Max string length is 250.',
                                max: 250
                            }
                        }
                    },
                    'Address.AddressLine4': {
                        validators: {
                            stringLength: {
                                message: 'Max string length is 250.',
                                max: 250
                            }
                        }
                    },
                    'Address.AddressSuburb': {
                        validators: {
                            stringLength: {
                                message: 'Max string length is 50.',
                                max: 50
                            }
                        }
                    },
                    'Address.AddressCity': {
                        validators: {
                            notEmpty: {
                                message: 'The field is required.'
                            },
                            stringLength: {
                                message: 'Max string length is 50.',
                                max: 50
                            }
                        }
                    },
                    'Address.AddressPostalCode': {
                        validators: {
                            notEmpty: {
                                message: 'The field is required.'
                            },
                            numeric: {
                                message: 'Postal code must be a number.'
                            },
                            stringLength: {
                                message: 'Postal code must be 4 digits long.',
                                max: 4,
                                min: 4
                            }
                        }
                    }
                }
            })
    });

    $("#SelectedAddress").change(function () {
        $.ajax({
            url: '@Url.Action("GetAddressPartial", "ShoppingCart")',
            type: 'POST',
            data: {
                id: $("#SelectedAddress").val(),
            }
        }).done
            (function (data) {
                $('#AddressContainer').html(data);
                var validator = $('#saveForm').data('bootstrapValidator');
                validator.addField($('#Address_AddressLine1'));
                validator.addField($('#Address_AddressLine2'));
                validator.addField($('#Address_AddressLine3'));
                validator.addField($('#Address_AddressLine4'));
                validator.addField($('#Address_AddressCity'));
                validator.addField($('#Address_AddressSuburb'));
                validator.addField($('#Address_AddressPostalCode'));
                $("#Address_AddressPostalCode").trigger('keyup');
            });
    });

    $(document).on('keyup', '.dynamicControl', function () {

        if ($("#Address_AddressPostalCode").val().length == 4) {

            var selectedVal = "";
            var selected = $("#radioDiv input[type='radio']:checked");
            if (selected.length > 0) {
                selectedVal = selected.val();
            }

            $.ajax({
                url: '@Url.Action("GetDeliveryOptions", "ShoppingCart")',
                type: 'POST',
                data: {
                    id: $("#Address_AddressPostalCode").val(),
                    selectedDeliveryType: selectedVal
                }
            }).done
                (function (data) {
                    if (data != undefined) {
                        $('#DeliveryTypeContainer').html(data);
                    }
                });

            if (selectedVal == "Courier" || selectedVal == "LocalCourier") {
                $("#deliveryDateContainer").show().fadeIn(2000);
            }
            else if (selectedVal = "PostOffice") {
                $("#deliveryDateContainer").hide();
            }
        }
        else {
            $("#specialDeliveryDateContainer").hide();
            $("#deliveryDateContainer").hide();
        }
    });

    $(document).on('change', '.radioControl', function () {

        var selectedVal = "";
        var selected = $("#radioDiv input[type='radio']:checked");
        if (selected.length > 0) {
            selectedVal = selected.val();
        }

        if (selectedVal == "Courier" || selectedVal == "LocalCourier") {
                $("#deliveryDateContainer").show().fadeIn(2000);
            }
            else if (selectedVal = "PostOffice") {
                $("#deliveryDateContainer").hide();
            }

    });

    (function ($) {
        var $window = $(window),
            $html = $('#parentDelivery');

        function resize() {
            if ($window.width() > 600) {
                return $html.addClass('center_div');
            }

            $html.removeClass('center_div');
        }

        $window
            .resize(resize)
            .trigger('resize');
    })(jQuery);
</script>

@Html.Partial("_RequiredFields")