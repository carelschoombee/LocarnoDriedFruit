@using FreeMarket.Models
@model ViewProductViewModel

@{
    AjaxOptions ajaxOpts = new AjaxOptions
    {
        UpdateTargetId = "cartPartial",
        LoadingElementId = "loadingDiv"
    };
}

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h2 class="modal-title text-center" id="EditModalLabel">@Model.ProductInstance.Description</h2>

            @using (Ajax.BeginForm("AddToCart", "ShoppingCart", null, ajaxOpts, new { @id = "editForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="modal-body">
                    <div class="form-horizontal">
                        <hr />

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <table class="table table-bordered-custom table-responsive">
                            <tr>
                                <th class="col-sm-6 text-center">Image</th>
                                <th class="col-sm-6 text-center">Description</th>
                            </tr>
                            <tr>
                                <td rowspan="4">
                                    <img class="img-thumbnail" src="@Url.Action("RenderImage", "Image", new { id = Model.ProductInstance.MainImageNumber, defaultSize = PictureSize.Large })" alt="@Model.ProductInstance.Description" title="@Model.ProductInstance.Description" />
                                </td>
                                <td>
                                    <table class="table table-bordered-custom table-responsive well">
                                        <tr>
                                            <td class="text-center" colspan="2">
                                                @*<div><u>Rest of RSA</u></div>*@
                                                <div style="font-size:medium; font-weight:600;">@String.Format("{0:C}", Model.ProductInstance.PricePerUnit)</div>
                                                <div style="font-size:small">per&nbsp;@Html.Action("GetDimensions", "Product", new { productNumber = Model.ProductInstance.ProductNumber })</div>
                                                @if (Model.ProductInstance.DepartmentName == "Snacking Nuts")
                                                {
                                                    <div style="font-size:small"><u>Free Delivery in Struisbaai, L'Agulhas and Suiderstrand</u></div>
                                                }
                                            </td>
                                            @*<td class="text-center">
                                                <div><u>Struisbaai</u></div>
                                                <div style="font-size:medium; font-weight:600">@String.Format("{0:C}", Model.ProductInstance.SpecialPricePerUnit) </div>
                                                <div style="font-size:small">per&nbsp;@Html.Action("GetDimensions", "Product", new { productNumber = Model.ProductInstance.ProductNumber })</div>
                                            </td>*@
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                            <tr>
                                <td>Supplied by: <span class="text-info">@Model.ProductInstance.SupplierName</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-6">
                                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @style = "width:125px", @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Quantity)
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div id="CourierContainer">

                                       @Html.Partial("_CourierData", Model)

                                    </div>
                                </td>
                            </tr>
                        </table>

                        <div>
                            <i>@Model.ProductInstance.LongDescription</i>
                        </div>

                        <br />

                        <div>
                            <strong>Average Rating:</strong>
                            <div><label style="font-size: 16px; color:gold">@Html.Action("GetAverageRating", "Product", new { productNumber = Model.ProductNumber, supplierNumber = Model.SupplierNumber }) / 3</label></div>
                            @*<input id="input-id" name="input-id" value="@Html.Action("GetAverageRating", "Product", new { productNumber = Model.ProductNumber, supplierNumber = Model.SupplierNumber })" data-min="0" data-max="3" step="0.1" data-show-caption="true" data-size="sm">*@
                            <a id="readReviews" style="color:black"><span class="glyphicon glyphicon-plus-sign">Read Reviews</span></a> <a id="closeReviews"><span class="glyphicon glyphicon-minus-sign text-info">Close Reviews</span></a>
                        </div>

                        <div id="ReviewsContainer">
                            
                        </div>

                        <div>
                            @Html.HiddenFor(model => Model.ProductNumber)
                            @Html.HiddenFor(model => Model.SupplierNumber)
                            @Html.HiddenFor(model => Model.CustodianQuantityOnHand)
                            @Html.HiddenFor(model => Model.CustodianNumber)
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-success"><span class="glyphicon glyphicon-shopping-cart" aria-hidden="true">Add to Cart</span></button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Cancel</button>
                </div>
            }
        </div>
    </div>
</div>

<script language="javascript" type="text/javascript">

    $('#input-id').rating({displayOnly: true, step: 0.1, stars: 3});

    $("#readReviews").click(function () {
        $.ajax({
            url: '@Url.Action("GetReviews", "Product")',
            type: 'GET',
            data: {
                productNumber: @Model.ProductNumber,
                supplierNumber: @Model.SupplierNumber,
                size: @Model.ReviewPageSize,
            }
        }).done
            (function (data) {
                $('#ReviewsContainer').html(data).hide().fadeIn(2000);
            });
    });

    $("#closeReviews").click(function () {
        $('#ReviewsContainer').empty();
    });

    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })

    $('#editForm').bootstrapValidator({
        feedbackIcons: {
            valid: 'glyphicon glyphicon-ok',
            invalid: 'glyphicon glyphicon-remove',
            validating: 'glyphicon glyphicon-refresh'
        },
        fields: {
            Quantity: {
                validators: {
                    notEmpty: {
                        message: 'The field is required.'
                    },
                    between: {
                        min: 1,
                        max: 1000,
                        message: 'Please choose a quantity that is greater than 0 and less than 1000.'
                    },
                    callback: {
                        message: "There is not enough stock. Please try a smaller quantity or choose a different product.",
                        callback: function (value, validator) {
                            return value <= @Model.CustodianQuantityOnHand;
                        }
                    }
                }
            }
        }
    }).on('success.form.bv', function (e) {
        e.preventDefault();
        $('.modal-backdrop').remove();
        $('#EditModal').modal('hide');
    }).on('error.form.bv', function (e) {
        e.preventDefault();        
    });
</script>
